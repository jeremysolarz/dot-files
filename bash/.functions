# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

# find shorthand
function f() {
    find . -name "$1"
}

# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}


# lets toss an image onto my server and pbcopy that bitch.
function scpp() {
    scp "$1" aurgasm@aurgasm.us:~/paulirish.com/i;
    echo "http://paulirish.com/i/$1" | pbcopy;
    echo "Copied to clipboard: http://paulirish.com/i/$1"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# git log with per-commit cmd-clickable GitHub URLs (iTerm)
function gf() {
  local remote="$(git remote -v | awk '/^origin.*\(push\)$/ {print $2}')"
  [[ "$remote" ]] || return
  local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
  git log $* --name-status --color | awk "$(cat <<AWK
    /^.*commit [0-9a-f]{40}/ {sha=substr(\$2,1,7)}
    /^[MA]\t/ {printf "%s\thttps://github.com/$user_repo/blob/%s/%s\n", \$1, sha, \$2; next}
    /.*/ {print \$0}
AWK
  )" | less -F
}


# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}


# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}


# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
	mkdir -p "$1"
	git archive master | tar -x -C "$1"
}



# get gzipped size
function gzs() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f "$1" ] ; then
		local filename=$(basename "$1")
		local foldername="${filename%%.*}"
		local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
		local didfolderexist=false
		if [ -d "$foldername" ]; then
			didfolderexist=true
			read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
			echo
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				return
			fi
		fi
		mkdir -p "$foldername" && cd "$foldername"
		case $1 in
			*.tar.bz2) tar xjf "$fullpath" ;;
			*.tar.gz) tar xzf "$fullpath" ;;
			*.tar.xz) tar Jxvf "$fullpath" ;;
			*.tar.Z) tar xzf "$fullpath" ;;
			*.tar) tar xf "$fullpath" ;;
			*.taz) tar xzf "$fullpath" ;;
			*.tb2) tar xjf "$fullpath" ;;
			*.tbz) tar xjf "$fullpath" ;;
			*.tbz2) tar xjf "$fullpath" ;;
			*.tgz) tar xzf "$fullpath" ;;
			*.txz) tar Jxvf "$fullpath" ;;
			*.zip) unzip "$fullpath" ;;
			*) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

resize(){
  sips -Z 640 *.jpg
  sips -Z 640 *.png
}

# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

outgoing(){
  cat >~/out-style.txt <<EOL
changeset = "{files}"
file = "{file}\n"
EOL
  hg -q outgoing --style ~/out-style.txt | sort -u
  rm -rf ~/out-style.txt
}

# visualvm(){
  # cd ~/jboss-as-7.1.1.Final/bin
  # ./visualvm.sh
# }


gh(){
  grep -i -r --include \*$2\* $1 . 2> /dev/null
}

cleanDNS(){
  dscacheutil -flushcache
  sudo killall -HUP mDNSResponder
}

delete_ln(){
  rm -rf ~/Library/Application\ Support/Lotus\ Notes\ Data/*
  rm -rf ~/Library/Preferences/Notes\ Preferences
  rm -rf /Applications/Lotus\ Notes.app
  cd ~/Downloads/software/
  unzip "Lotus Notes.app.zip"
  mv Notes.app "Lotus Notes.app"
  mv "Lotus Notes.app" /Applications/
  # copy id
  cp ~/Dropbox/Privat/UN/UNFCCC\ Personal\ Documents/jsolarz.id ~/Library/Application\ Support/Lotus\ Notes\ Data
  echo Mailserver
  echo  mailsvr1/unfccc 
  echo  Sametime
  echo  Use Jeremy Solarz as user
  echo  jsolarz@unfccc.int
}

proxy(){
  export HTTP_PROXY="http://svmleuproxy.unfccc.net:3128/"
  export HTTPS_PROXY="http://svmleuproxy.unfccc.net:3128/"
  export http_proxy="http://svmleuproxy.unfccc.net:3128/"
  export https_proxy="http://svmleuproxy.unfccc.net:3128/"
  export ALL_PROXY=$http_proxy
  export NO_PROXY="192.168.99.102,192.168.99.103,192.168.56.101"
  cp ~/profile/mercurial/.hgrc.proxy ~/.hgrc
  cp ~/profile/npm/.npmrc.proxy ~/.npmrc
  cp ~/profile/git/.gitconfig.proxy ~/.gitconfig
}

unproxy(){
  unset HTTP_PROXY
  unset HTTPS_PROXY
  unset http_proxy
  unset https_proxy
  unset ALL_PROXY
  cp ~/profile/mercurial/.hgrc.noproxy ~/.hgrc
  cp ~/profile/npm/.npmrc.noproxy ~/.npmrc
  cp ~/profile/git/.gitconfig.noproxy ~/.gitconfig
}

log_daily(){
  today=$(date +"%m/%d/%Y")
  jira_time_track log ANAIS-1451 30m "$today" "Daily meeting"
}

isql(){
  java -jar ~/Downloads/Workbench-Build117/sqlworkbench.jar -url="jdbc:sqlserver://127.0.0.1;databaseName=CRF_Prod_12012015" -username="crf_developer" -password="crf@user" -driverJar="/Users/macbook15/jboss-as-7.1.1.Final/modules/com/microsoft/sqlserver/jdbc/main/jdbc-SQLServerDriver-4.0.jar" -displayResult=true -command="$1"
}

glog(){
  branch="branch('$1')"
  hg glog -r "$branch" -l $2
}

update-prod-log(){
  cd ~/workspace/anais/automation/cli
  mount_smbfs //crfdevteam:H%40pp1L3G@172.17.1.68/crfjbosslog/ ./prod
}

update-uat-log(){
  cd ~/workspace/anais/automation/cli
  scp bedag-uat:/srv/wildfly/standalone/log/server.log ./uat
}

remote-log(){
  cnt=${2:-200}
  ssh $1 "sudo tail -n $cnt /srv/wildfly/standalone/log/server.log"
}
